{"ast":null,"code":"var _jsxFileName = \"/Users/abhinavtej/Desktop/MYPOCKET_AI/mypocketai-website/frontend/src/components/ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport styles from \"../assets/css/Auth.module.css\";\nimport logo from \"../assets/images/logo.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const {\n    token\n  } = useParams(); // Get token from URL\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!password || !confirmPassword) {\n      setMessage(\"Please fill in all fields.\");\n      setSuccess(false);\n      return;\n    }\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match.\");\n      setSuccess(false);\n      return;\n    }\n    try {\n      const response = await axios.post(`http://localhost:3001/api/auth/reset-password/${token}`, {\n        password\n      });\n      setMessage(response.data.message || \"Password reset successfully!\");\n      setSuccess(true);\n\n      // Redirect to login page after a delay\n      setTimeout(() => {\n        navigate(\"/login\");\n      }, 3000);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Failed to reset password.\");\n      setSuccess(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.authContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      alt: \"Logo\",\n      className: styles.authlogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: styles.authForm,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        placeholder: \"Enter new password\",\n        className: styles.authInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        placeholder: \"Confirm new password\",\n        className: styles.authInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: styles.authButton,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: success ? styles.successMessage : styles.errorMessage,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"3AlFV2755moscomKPTDNm1NfPvE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useParams","useNavigate","axios","styles","logo","jsxDEV","_jsxDEV","ResetPassword","_s","token","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","success","setSuccess","navigate","handleSubmit","e","preventDefault","response","post","data","setTimeout","error","_error$response","_error$response$data","className","authContainer","children","src","alt","authlogo","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","authForm","type","value","onChange","target","placeholder","authInput","authButton","successMessage","errorMessage","_c","$RefreshReg$"],"sources":["/Users/abhinavtej/Desktop/MYPOCKET_AI/mypocketai-website/frontend/src/components/ResetPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport styles from \"../assets/css/Auth.module.css\";\nimport logo from \"../assets/images/logo.png\";\n\nconst ResetPassword = () => {\n  const { token } = useParams(); // Get token from URL\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!password || !confirmPassword) {\n      setMessage(\"Please fill in all fields.\");\n      setSuccess(false);\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match.\");\n      setSuccess(false);\n      return;\n    }\n\n    try {\n      const response = await axios.post(`http://localhost:3001/api/auth/reset-password/${token}`, {\n        password,\n      });\n      setMessage(response.data.message || \"Password reset successfully!\");\n      setSuccess(true);\n\n      // Redirect to login page after a delay\n      setTimeout(() => {\n        navigate(\"/login\");\n      }, 3000);\n    } catch (error) {\n      setMessage(error.response?.data?.message || \"Failed to reset password.\");\n      setSuccess(false);\n    }\n  };\n\n  return (\n    <div className={styles.authContainer}>\n      <img src={logo} alt=\"Logo\" className={styles.authlogo} />\n      <h2>Reset Password</h2>\n      <form onSubmit={handleSubmit} className={styles.authForm}>\n        <input\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Enter new password\"\n          className={styles.authInput}\n        />\n        <input\n          type=\"password\"\n          value={confirmPassword}\n          onChange={(e) => setConfirmPassword(e.target.value)}\n          placeholder=\"Confirm new password\"\n          className={styles.authInput}\n        />\n        <button type=\"submit\" className={styles.authButton}>\n          Reset Password\n        </button>\n      </form>\n      {message && (\n        <p className={success ? styles.successMessage : styles.errorMessage}>{message}</p>\n      )}\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}