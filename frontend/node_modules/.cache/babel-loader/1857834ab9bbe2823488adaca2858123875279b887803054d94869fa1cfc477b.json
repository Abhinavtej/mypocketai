{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import\"../assets/css/BudgetAllocation.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BudgetAllocation=()=>{const[budgetList,setBudgetList]=useState([]);const[totalIncome,setTotalIncome]=useState(0);const[totalBudgetAllocated,setTotalBudgetAllocated]=useState(0);const[selectedCategory,setSelectedCategory]=useState(\"\");const[newBudgetAllocated,setNewBudgetAllocated]=useState(\"\");const[message,setMessage]=useState(\"\");const[currentMonth,setCurrentMonth]=useState(\"\");const categories=[\"Groceries\",\"Rent\",\"Utilities\",\"Entertainment\",\"Savings\",\"Miscellaneous\"];// Fetch the current month and format it\nuseEffect(()=>{const month=new Date().toLocaleString(\"default\",{month:\"long\"});const year=new Date().getFullYear();setCurrentMonth(`${month} ${year}`);},[]);// Fetch income and budget data\nuseEffect(()=>{const fetchData=async()=>{try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to access budget data.\");return;}const[incomeResponse,budgetResponse]=await Promise.all([axios.get(\"http://localhost:3001/api/income\",{headers:{Authorization:`Bearer ${token}`}}),axios.get(\"http://localhost:3001/api/budget\",{headers:{Authorization:`Bearer ${token}`}})]);setTotalIncome(incomeResponse.data.totalIncome);const budgets=budgetResponse.data.budgets;setBudgetList(budgets);setTotalBudgetAllocated(budgets.reduce((total,budget)=>total+budget.budgetAllocated,0));if(totalIncome<totalBudgetAllocated){setMessage(\"Please update Income to allocate more budget.\");return;}}catch(err){setMessage(\"Error fetching data. Please try again.\");}};fetchData();},[totalBudgetAllocated,totalIncome]);const handleAddBudget=async()=>{if(!selectedCategory||!newBudgetAllocated){setMessage(\"Please fill out both fields.\");return;}const newAllocation=parseFloat(newBudgetAllocated);if(newAllocation<=0){setMessage(\"Please provide a valid budget amount.\");return;}if(totalBudgetAllocated+newAllocation>totalIncome){setMessage(\"Budget allocation cannot exceed total income.\");return;}try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to access budget data.\");return;}// Check if the category already exists for the current month\nconst existingBudget=budgetList.find(budget=>budget.category===selectedCategory&&new Date(budget.date).getMonth()===new Date().getMonth());if(existingBudget){// If the category already exists, update the existing budget by adding the new allocation\nawait axios.put(`http://localhost:3001/api/budget/${existingBudget._id}`,{budgetAllocated:existingBudget.budgetAllocated+newAllocation},{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Budget updated successfully!\");}else{// If the category doesn't exist, create a new budget entry\nawait axios.post(\"http://localhost:3001/api/budget\",{category:selectedCategory,budgetAllocated:newAllocation},{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Budget added successfully!\");}// Fetch updated data after adding/updating the budget\nawait fetchUpdatedData();setSelectedCategory(\"\");setNewBudgetAllocated(\"\");}catch(err){setMessage(\"Error adding or updating budget. Please try again.\");}};// Reusable function to fetch and update income and budget data\nconst fetchUpdatedData=async()=>{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to access budget data.\");return;}try{const[incomeResponse,budgetResponse]=await Promise.all([axios.get(\"http://localhost:3001/api/income\",{headers:{Authorization:`Bearer ${token}`}}),axios.get(\"http://localhost:3001/api/budget\",{headers:{Authorization:`Bearer ${token}`}})]);setTotalIncome(incomeResponse.data.totalIncome);const budgets=budgetResponse.data.budgets;setBudgetList(budgets);setTotalBudgetAllocated(budgets.reduce((total,budget)=>total+budget.budgetAllocated,0));}catch(err){setMessage(\"Error fetching budget data. Please try again.\");}};const handleUpdateBudget=async(id,newAllocation)=>{try{var _budgetList$find;const updatedAllocation=parseFloat(newAllocation);if(isNaN(updatedAllocation)||updatedAllocation<=0){setMessage(\"Please provide a valid budget allocation.\");return;}const currentBudget=((_budgetList$find=budgetList.find(b=>b._id===id))===null||_budgetList$find===void 0?void 0:_budgetList$find.budgetAllocated)||0;if(updatedAllocation+totalBudgetAllocated-currentBudget>totalIncome){setMessage(\"Updated budget exceeds total income.\");return;}const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to update a budget.\");return;}await axios.put(`http://localhost:3001/api/budget/${id}`,{budgetAllocated:updatedAllocation},{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Budget updated successfully!\");// Inline the refresh data logic\nconst[incomeResponse,budgetResponse]=await Promise.all([axios.get(\"http://localhost:3001/api/income\",{headers:{Authorization:`Bearer ${token}`}}),axios.get(\"http://localhost:3001/api/budget\",{headers:{Authorization:`Bearer ${token}`}})]);setTotalIncome(incomeResponse.data.totalIncome);const budgets=budgetResponse.data.budgets;setBudgetList(budgets);setTotalBudgetAllocated(budgets.reduce((total,budget)=>total+budget.budgetAllocated,0));}catch(err){setMessage(\"Error updating budget. Please try again.\");}};const handleRemoveBudget=async id=>{try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to remove a budget.\");return;}await axios.delete(`http://localhost:3001/api/budget/${id}`,{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Budget removed successfully!\");// Inline the refresh data logic\nconst[incomeResponse,budgetResponse]=await Promise.all([axios.get(\"http://localhost:3001/api/income\",{headers:{Authorization:`Bearer ${token}`}}),axios.get(\"http://localhost:3001/api/budget\",{headers:{Authorization:`Bearer ${token}`}})]);setTotalIncome(incomeResponse.data.totalIncome);const budgets=budgetResponse.data.budgets;setBudgetList(budgets);setTotalBudgetAllocated(budgets.reduce((total,budget)=>total+budget.budgetAllocated,0));}catch(err){setMessage(\"Error removing budget. Please try again.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"budget-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Budget Allocation\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"date-display\",children:[\"Month: \",currentMonth]}),/*#__PURE__*/_jsxs(\"div\",{className:\"budget-summary\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Total Income: \\u20B9\",totalIncome]}),/*#__PURE__*/_jsxs(\"h4\",{children:[\"Total Budget Allocated: \\u20B9\",totalBudgetAllocated]}),/*#__PURE__*/_jsxs(\"h4\",{children:[\"Budget Remaining: \\u20B9\",totalIncome-totalBudgetAllocated]})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message}),/*#__PURE__*/_jsx(\"h4\",{children:\"Add Budget\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"add-budget\",children:[/*#__PURE__*/_jsxs(\"select\",{value:selectedCategory,onChange:e=>setSelectedCategory(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Category\"}),categories.map((category,index)=>/*#__PURE__*/_jsx(\"option\",{value:category,children:category},index))]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:newBudgetAllocated,onChange:e=>setNewBudgetAllocated(e.target.value),placeholder:\"Budget Amount\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAddBudget,children:\"Add Budget\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Budget List\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"budget-list\",children:budgetList.map(item=>/*#__PURE__*/_jsxs(\"li\",{className:\"budget-item\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[item.category,\": \\u20B9\",item.budgetAllocated]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Date: \",new Date(item.date).toLocaleDateString()]}),/*#__PURE__*/_jsx(\"p\",{children:\"Update Value:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:item.budgetAllocated,onChange:e=>handleUpdateBudget(item._id,parseFloat(e.target.value))}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleRemoveBudget(item._id),children:\"Remove\"})]},item._id))})]})]});};export default BudgetAllocation;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","BudgetAllocation","budgetList","setBudgetList","totalIncome","setTotalIncome","totalBudgetAllocated","setTotalBudgetAllocated","selectedCategory","setSelectedCategory","newBudgetAllocated","setNewBudgetAllocated","message","setMessage","currentMonth","setCurrentMonth","categories","month","Date","toLocaleString","year","getFullYear","fetchData","token","localStorage","getItem","incomeResponse","budgetResponse","Promise","all","get","headers","Authorization","data","budgets","reduce","total","budget","budgetAllocated","err","handleAddBudget","newAllocation","parseFloat","existingBudget","find","category","date","getMonth","put","_id","post","fetchUpdatedData","handleUpdateBudget","id","_budgetList$find","updatedAllocation","isNaN","currentBudget","b","handleRemoveBudget","delete","className","children","value","onChange","e","target","map","index","type","placeholder","onClick","item","toLocaleDateString"],"sources":["/Users/abhinavtej/Desktop/MYPOCKET_AI/mypocketai-website/frontend/src/components/BudgetAllocation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../assets/css/BudgetAllocation.css\";\n\nconst BudgetAllocation = () => {\n  const [budgetList, setBudgetList] = useState([]);\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [totalBudgetAllocated, setTotalBudgetAllocated] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [newBudgetAllocated, setNewBudgetAllocated] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [currentMonth, setCurrentMonth] = useState(\"\");\n\n  const categories = [\n    \"Groceries\",\n    \"Rent\",\n    \"Utilities\",\n    \"Entertainment\",\n    \"Savings\",\n    \"Miscellaneous\",\n  ];\n\n  // Fetch the current month and format it\n  useEffect(() => {\n    const month = new Date().toLocaleString(\"default\", { month: \"long\" });\n    const year = new Date().getFullYear();\n    setCurrentMonth(`${month} ${year}`);\n  }, []);\n\n  // Fetch income and budget data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setMessage(\"Please log in to access budget data.\");\n          return;\n        }\n  \n        const [incomeResponse, budgetResponse] = await Promise.all([\n          axios.get(\"http://localhost:3001/api/income\", {\n            headers: { Authorization: `Bearer ${token}` },\n          }),\n          axios.get(\"http://localhost:3001/api/budget\", {\n            headers: { Authorization: `Bearer ${token}` },\n          }),\n        ]);\n  \n        setTotalIncome(incomeResponse.data.totalIncome);\n        const budgets = budgetResponse.data.budgets;\n        setBudgetList(budgets);\n        setTotalBudgetAllocated(\n          budgets.reduce((total, budget) => total + budget.budgetAllocated, 0)\n        );\n\n        if ( totalIncome < totalBudgetAllocated) {\n        setMessage(\"Please update Income to allocate more budget.\");\n        return;\n      }\n      } catch (err) {\n        setMessage(\"Error fetching data. Please try again.\");\n      }\n    };\n  \n    fetchData();\n  }, [totalBudgetAllocated, totalIncome]);\n  \n  const handleAddBudget = async () => {\n    if (!selectedCategory || !newBudgetAllocated) {\n      setMessage(\"Please fill out both fields.\");\n      return;\n    }\n  \n    const newAllocation = parseFloat(newBudgetAllocated);\n    if (newAllocation <= 0) {\n      setMessage(\"Please provide a valid budget amount.\");\n      return;\n    }\n  \n    if (totalBudgetAllocated + newAllocation > totalIncome) {\n      setMessage(\"Budget allocation cannot exceed total income.\");\n      return;\n    }\n  \n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setMessage(\"Please log in to access budget data.\");\n        return;\n      }\n  \n      // Check if the category already exists for the current month\n      const existingBudget = budgetList.find(\n        (budget) => budget.category === selectedCategory && new Date(budget.date).getMonth() === new Date().getMonth()\n      );\n  \n      if (existingBudget) {\n        // If the category already exists, update the existing budget by adding the new allocation\n        await axios.put(\n          `http://localhost:3001/api/budget/${existingBudget._id}`,\n          { budgetAllocated: existingBudget.budgetAllocated + newAllocation },\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n  \n        setMessage(\"Budget updated successfully!\");\n      } else {\n        // If the category doesn't exist, create a new budget entry\n        await axios.post(\n          \"http://localhost:3001/api/budget\",\n          { category: selectedCategory, budgetAllocated: newAllocation },\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n  \n        setMessage(\"Budget added successfully!\");\n      }\n  \n      // Fetch updated data after adding/updating the budget\n      await fetchUpdatedData();\n      setSelectedCategory(\"\");\n      setNewBudgetAllocated(\"\");\n  \n    } catch (err) {\n      setMessage(\"Error adding or updating budget. Please try again.\");\n    }\n  };\n  \n  \n  // Reusable function to fetch and update income and budget data\n  const fetchUpdatedData = async () => {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      setMessage(\"Please log in to access budget data.\");\n      return;\n    }\n  \n    try {\n      const [incomeResponse, budgetResponse] = await Promise.all([\n        axios.get(\"http://localhost:3001/api/income\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n        axios.get(\"http://localhost:3001/api/budget\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n      ]);\n  \n      setTotalIncome(incomeResponse.data.totalIncome);\n      const budgets = budgetResponse.data.budgets;\n      setBudgetList(budgets);\n      setTotalBudgetAllocated(\n        budgets.reduce((total, budget) => total + budget.budgetAllocated, 0)\n      );\n    } catch (err) {\n      setMessage(\"Error fetching budget data. Please try again.\");\n    }\n  };\n  \n\n  const handleUpdateBudget = async (id, newAllocation) => {\n    try {\n      const updatedAllocation = parseFloat(newAllocation);\n      if (isNaN(updatedAllocation) || updatedAllocation <= 0) {\n        setMessage(\"Please provide a valid budget allocation.\");\n        return;\n      }\n  \n      const currentBudget = budgetList.find((b) => b._id === id)?.budgetAllocated || 0;\n      if (updatedAllocation + totalBudgetAllocated - currentBudget > totalIncome) {\n        setMessage(\"Updated budget exceeds total income.\");\n        return;\n      }\n  \n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setMessage(\"Please log in to update a budget.\");\n        return;\n      }\n  \n      await axios.put(\n        `http://localhost:3001/api/budget/${id}`,\n        { budgetAllocated: updatedAllocation },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n  \n      setMessage(\"Budget updated successfully!\");\n  \n      // Inline the refresh data logic\n      const [incomeResponse, budgetResponse] = await Promise.all([\n        axios.get(\"http://localhost:3001/api/income\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n        axios.get(\"http://localhost:3001/api/budget\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n      ]);\n  \n      setTotalIncome(incomeResponse.data.totalIncome);\n      const budgets = budgetResponse.data.budgets;\n      setBudgetList(budgets);\n      setTotalBudgetAllocated(\n        budgets.reduce((total, budget) => total + budget.budgetAllocated, 0)\n      );\n    } catch (err) {\n      setMessage(\"Error updating budget. Please try again.\");\n    }\n  };\n  \n  const handleRemoveBudget = async (id) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setMessage(\"Please log in to remove a budget.\");\n        return;\n      }\n  \n      await axios.delete(`http://localhost:3001/api/budget/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n  \n      setMessage(\"Budget removed successfully!\");\n  \n      // Inline the refresh data logic\n      const [incomeResponse, budgetResponse] = await Promise.all([\n        axios.get(\"http://localhost:3001/api/income\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n        axios.get(\"http://localhost:3001/api/budget\", {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n      ]);\n  \n      setTotalIncome(incomeResponse.data.totalIncome);\n      const budgets = budgetResponse.data.budgets;\n      setBudgetList(budgets);\n      setTotalBudgetAllocated(\n        budgets.reduce((total, budget) => total + budget.budgetAllocated, 0)\n      );\n    } catch (err) {\n      setMessage(\"Error removing budget. Please try again.\");\n    }\n  };\n  \n\n  return (\n    <div className=\"budget-container\">\n      <h2>Budget Allocation</h2>\n      <p className=\"date-display\">Month: {currentMonth}</p>\n      <div className=\"budget-summary\">\n        <h3>Total Income: ₹{totalIncome}</h3>\n        <h4>Total Budget Allocated: ₹{totalBudgetAllocated}</h4>\n        <h4>Budget Remaining: ₹{totalIncome - totalBudgetAllocated}</h4>\n      </div>\n      {message && <p className=\"message\">{message}</p>}\n\n      <h4>Add Budget</h4>\n      <div className=\"add-budget\">\n        <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>\n          <option value=\"\">Select Category</option>\n          {categories.map((category, index) => (\n            <option key={index} value={category}>\n              {category}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          value={newBudgetAllocated}\n          onChange={(e) => setNewBudgetAllocated(e.target.value)}\n          placeholder=\"Budget Amount\"\n        />\n        <button onClick={handleAddBudget}>Add Budget</button>\n      </div>\n\n      <div>\n        <h4>Budget List</h4>\n        <ul className=\"budget-list\">\n          {budgetList.map((item) => (\n            <li key={item._id} className=\"budget-item\">\n              <span>\n                {item.category}: ₹{item.budgetAllocated}\n              </span>\n              <span>Date: {new Date(item.date).toLocaleDateString()}</span>\n              <p>Update Value:</p>\n              <input\n                type=\"number\"\n                value={item.budgetAllocated}\n                onChange={(e) => handleUpdateBudget(item._id, parseFloat(e.target.value))}\n              />\n              <button onClick={() => handleRemoveBudget(item._id)}>Remove</button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default BudgetAllocation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}