{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import\"../assets/css/ExpenseManagement.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ExpenseManagement=()=>{const[expenseList,setExpenseList]=useState([]);const[totalExpense,setTotalExpense]=useState(0);const[budgetCategories,setBudgetCategories]=useState([]);const[selectedCategory,setSelectedCategory]=useState(\"\");const[newExpense,setNewExpense]=useState(\"\");const[message,setMessage]=useState(\"\");const[currentMonth,setCurrentMonth]=useState(\"\");// Fetch the current month and format it\nuseEffect(()=>{const month=new Date().toLocaleString(\"default\",{month:\"long\"});const year=new Date().getFullYear();setCurrentMonth(`${month} ${year}`);},[]);// Fetch expense and budget categories data\nuseEffect(()=>{const fetchData=async()=>{try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to access expense data.\");return;}const[expenseResponse,budgetResponse]=await Promise.all([axios.get(\"http://localhost:3001/api/expense\",{headers:{Authorization:`Bearer ${token}`}}),axios.get(\"http://localhost:3001/api/budget\",{headers:{Authorization:`Bearer ${token}`}})]);setExpenseList(expenseResponse.data.expenses);setTotalExpense(expenseResponse.data.expenses.reduce((total,expense)=>total+expense.expense,0));// Assuming budgetResponse.data.budgets contains the categories and their allocated budgets\nsetBudgetCategories(budgetResponse.data.budgets);}catch(err){setMessage(\"Error fetching data. Please try again.\");}};fetchData();},[]);// Add a new expense\n// Add a new expense\nconst handleAddExpense=async()=>{if(!selectedCategory||!newExpense){setMessage(\"Please fill out both fields.\");return;}const expenseAmount=parseFloat(newExpense);if(expenseAmount<=0){setMessage(\"Please provide a valid expense.\");return;}try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to add an expense.\");return;}// Fetch the budget for the selected category\nconst category=budgetCategories.find(c=>c.category===selectedCategory);const categoryBudget=category?category.budgetAllocated:0;// Calculate the total expense for the category (existing expenses + new expense)\nconst totalCategoryExpense=expenseList.filter(expense=>expense.category===selectedCategory).reduce((total,expense)=>total+expense.expense,0)+expenseAmount;// Check if the expense exceeds the allocated budget\nif(totalCategoryExpense>categoryBudget){setMessage(`Total expense exceeds the allocated budget for ${selectedCategory}, Allocated: ₹${categoryBudget} only.`);return;}await axios.post(\"http://localhost:3001/api/expense\",{category:selectedCategory,expense:expenseAmount},{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Expense added successfully!\");setSelectedCategory(\"\");setNewExpense(\"\");fetchUpdatedData();// Re-fetch the updated data after adding the expense\n}catch(err){setMessage(\"Error adding expense. Please try again.\");}};// Update an expense\nconst handleUpdateExpense=async(id,updatedExpense)=>{try{var _expenseList$find,_budgetCategories$fin;const expenseAmount=parseFloat(updatedExpense);if(isNaN(expenseAmount)||expenseAmount<=0){setMessage(\"Please provide a valid expense.\");return;}// Fetch the original category of the expense\nconst expenseCategory=(_expenseList$find=expenseList.find(expense=>expense._id===id))===null||_expenseList$find===void 0?void 0:_expenseList$find.category;const categoryBudget=((_budgetCategories$fin=budgetCategories.find(category=>category.category===expenseCategory))===null||_budgetCategories$fin===void 0?void 0:_budgetCategories$fin.budgetAllocated)||0;// Calculate the total expense for the category (existing expenses excluding the current one + updated expense)\nconst totalCategoryExpense=expenseList.filter(expense=>expense.category===expenseCategory&&expense._id!==id).reduce((total,expense)=>total+expense.expense,0)+expenseAmount;// Check if the updated expense exceeds the allocated budget\nif(totalCategoryExpense>categoryBudget){setMessage(`Updated total expense exceeds the allocated budget for ${expenseCategory}, Allocated: ₹${categoryBudget} only.`);return;}const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to update an expense.\");return;}await axios.put(`http://localhost:3001/api/expense/${id}`,{expense:expenseAmount},{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Expense updated successfully!\");fetchUpdatedData();// Re-fetch the updated data after updating the expense\n}catch(err){setMessage(\"Error updating expense. Please try again.\");}};// Remove an expense\nconst handleRemoveExpense=async id=>{try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to remove an expense.\");return;}await axios.delete(`http://localhost:3001/api/expense/${id}`,{headers:{Authorization:`Bearer ${token}`}});setMessage(\"Expense removed successfully!\");fetchUpdatedData();}catch(err){setMessage(\"Error removing expense. Please try again.\");}};// Re-fetch data\nconst fetchUpdatedData=async()=>{try{const token=localStorage.getItem(\"token\");if(!token){setMessage(\"Please log in to access data.\");return;}const response=await axios.get(\"http://localhost:3001/api/expense\",{headers:{Authorization:`Bearer ${token}`}});setExpenseList(response.data.expenses);setTotalExpense(response.data.expenses.reduce((total,expense)=>total+expense.expense,0));}catch(err){setMessage(\"Error fetching data. Please try again.\");}};return/*#__PURE__*/_jsxs(\"div\",{className:\"expense-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Expense Management\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"date-display\",children:[\"Month: \",currentMonth]}),/*#__PURE__*/_jsx(\"div\",{className:\"expense-summary\",children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"Total Expense: \\u20B9\",totalExpense]})}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message}),/*#__PURE__*/_jsx(\"h4\",{children:\"Add Expense\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"add-expense\",children:[/*#__PURE__*/_jsxs(\"select\",{value:selectedCategory,onChange:e=>setSelectedCategory(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Category\"}),budgetCategories.map((category,index)=>/*#__PURE__*/_jsx(\"option\",{value:category.category,children:category.category},category._id))]}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:newExpense,onChange:e=>setNewExpense(e.target.value),placeholder:\"Expense\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAddExpense,children:\"Add Expense\"})]}),/*#__PURE__*/_jsx(\"h4\",{children:\"Expense List\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"expense-list\",children:expenseList.map(item=>/*#__PURE__*/_jsxs(\"li\",{className:\"expense-item\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[item.category,\": \\u20B9\",item.expense]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Date: \",new Date(item.date).toLocaleDateString()]}),/*#__PURE__*/_jsx(\"p\",{children:\"Update Value:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:item.expense,onChange:e=>handleUpdateExpense(item._id,parseFloat(e.target.value))}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleRemoveExpense(item._id),children:\"Remove\"})]},item._id))})]});};export default ExpenseManagement;","map":{"version":3,"names":["React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","ExpenseManagement","expenseList","setExpenseList","totalExpense","setTotalExpense","budgetCategories","setBudgetCategories","selectedCategory","setSelectedCategory","newExpense","setNewExpense","message","setMessage","currentMonth","setCurrentMonth","month","Date","toLocaleString","year","getFullYear","fetchData","token","localStorage","getItem","expenseResponse","budgetResponse","Promise","all","get","headers","Authorization","data","expenses","reduce","total","expense","budgets","err","handleAddExpense","expenseAmount","parseFloat","category","find","c","categoryBudget","budgetAllocated","totalCategoryExpense","filter","post","fetchUpdatedData","handleUpdateExpense","id","updatedExpense","_expenseList$find","_budgetCategories$fin","isNaN","expenseCategory","_id","put","handleRemoveExpense","delete","response","className","children","value","onChange","e","target","map","index","type","placeholder","onClick","item","date","toLocaleDateString"],"sources":["/Users/abhinavtej/Desktop/MYPOCKET_AI/mypocketai-website/frontend/src/components/ExpenseManagement.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../assets/css/ExpenseManagement.css\";\n\nconst ExpenseManagement = () => {\n  const [expenseList, setExpenseList] = useState([]);\n  const [totalExpense, setTotalExpense] = useState(0);\n  const [budgetCategories, setBudgetCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [newExpense, setNewExpense] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [currentMonth, setCurrentMonth] = useState(\"\");\n\n  // Fetch the current month and format it\n  useEffect(() => {\n    const month = new Date().toLocaleString(\"default\", { month: \"long\" });\n    const year = new Date().getFullYear();\n    setCurrentMonth(`${month} ${year}`);\n  }, []);\n\n  // Fetch expense and budget categories data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"token\");\n        if (!token) {\n          setMessage(\"Please log in to access expense data.\");\n          return;\n        }\n  \n        const [expenseResponse, budgetResponse] = await Promise.all([\n          axios.get(\"http://localhost:3001/api/expense\", {\n            headers: { Authorization: `Bearer ${token}` },\n          }),\n          axios.get(\"http://localhost:3001/api/budget\", {\n            headers: { Authorization: `Bearer ${token}` },\n          }),\n        ]);\n  \n        setExpenseList(expenseResponse.data.expenses);\n        setTotalExpense(\n          expenseResponse.data.expenses.reduce((total, expense) => total + expense.expense, 0)\n        );\n        \n        // Assuming budgetResponse.data.budgets contains the categories and their allocated budgets\n        setBudgetCategories(budgetResponse.data.budgets);\n      } catch (err) {\n        setMessage(\"Error fetching data. Please try again.\");\n      }\n    };\n  \n    fetchData();\n  }, []);\n  \n\n  // Add a new expense\n  // Add a new expense\nconst handleAddExpense = async () => {\n  if (!selectedCategory || !newExpense) {\n    setMessage(\"Please fill out both fields.\");\n    return;\n  }\n\n  const expenseAmount = parseFloat(newExpense);\n  if (expenseAmount <= 0) {\n    setMessage(\"Please provide a valid expense.\");\n    return;\n  }\n\n  try {\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      setMessage(\"Please log in to add an expense.\");\n      return;\n    }\n\n    // Fetch the budget for the selected category\n    const category = budgetCategories.find((c) => c.category === selectedCategory);\n    const categoryBudget = category ? category.budgetAllocated : 0;\n\n    // Calculate the total expense for the category (existing expenses + new expense)\n    const totalCategoryExpense = expenseList\n      .filter((expense) => expense.category === selectedCategory)\n      .reduce((total, expense) => total + expense.expense, 0) + expenseAmount;\n\n    // Check if the expense exceeds the allocated budget\n    if (totalCategoryExpense > categoryBudget) {\n      setMessage(`Total expense exceeds the allocated budget for ${selectedCategory}, Allocated: ₹${categoryBudget} only.`);\n      return;\n    }\n\n    await axios.post(\n      \"http://localhost:3001/api/expense\",\n      { category: selectedCategory, expense: expenseAmount },\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    setMessage(\"Expense added successfully!\");\n    setSelectedCategory(\"\");\n    setNewExpense(\"\");\n    fetchUpdatedData(); // Re-fetch the updated data after adding the expense\n  } catch (err) {\n    setMessage(\"Error adding expense. Please try again.\");\n  }\n};\n\n// Update an expense\nconst handleUpdateExpense = async (id, updatedExpense) => {\n  try {\n    const expenseAmount = parseFloat(updatedExpense);\n    if (isNaN(expenseAmount) || expenseAmount <= 0) {\n      setMessage(\"Please provide a valid expense.\");\n      return;\n    }\n\n    // Fetch the original category of the expense\n    const expenseCategory = expenseList.find((expense) => expense._id === id)?.category;\n    const categoryBudget = budgetCategories.find(\n      (category) => category.category === expenseCategory\n    )?.budgetAllocated || 0;\n\n    // Calculate the total expense for the category (existing expenses excluding the current one + updated expense)\n    const totalCategoryExpense = expenseList\n      .filter((expense) => expense.category === expenseCategory && expense._id !== id)\n      .reduce((total, expense) => total + expense.expense, 0) + expenseAmount;\n\n    // Check if the updated expense exceeds the allocated budget\n    if (totalCategoryExpense > categoryBudget) {\n      setMessage(`Updated total expense exceeds the allocated budget for ${expenseCategory}, Allocated: ₹${categoryBudget} only.`);\n      return;\n    }\n\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      setMessage(\"Please log in to update an expense.\");\n      return;\n    }\n\n    await axios.put(\n      `http://localhost:3001/api/expense/${id}`,\n      { expense: expenseAmount },\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n\n    setMessage(\"Expense updated successfully!\");\n    fetchUpdatedData(); // Re-fetch the updated data after updating the expense\n  } catch (err) {\n    setMessage(\"Error updating expense. Please try again.\");\n  }\n};\n\n  \n\n  // Remove an expense\n  const handleRemoveExpense = async (id) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setMessage(\"Please log in to remove an expense.\");\n        return;\n      }\n\n      await axios.delete(`http://localhost:3001/api/expense/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      setMessage(\"Expense removed successfully!\");\n      fetchUpdatedData();\n    } catch (err) {\n      setMessage(\"Error removing expense. Please try again.\");\n    }\n  };\n\n  // Re-fetch data\n  const fetchUpdatedData = async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setMessage(\"Please log in to access data.\");\n        return;\n      }\n\n      const response = await axios.get(\"http://localhost:3001/api/expense\", {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      setExpenseList(response.data.expenses);\n      setTotalExpense(\n        response.data.expenses.reduce((total, expense) => total + expense.expense, 0)\n      );\n    } catch (err) {\n      setMessage(\"Error fetching data. Please try again.\");\n    }\n  };\n\n  return (\n    <div className=\"expense-container\">\n      <h2>Expense Management</h2>\n      <p className=\"date-display\">Month: {currentMonth}</p>\n      <div className=\"expense-summary\">\n        <h3>Total Expense: ₹{totalExpense}</h3>\n      </div>\n      {message && <p className=\"message\">{message}</p>}\n\n      <h4>Add Expense</h4>\n      <div className=\"add-expense\">\n      <select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>\n        <option value=\"\">Select Category</option>\n        {budgetCategories.map((category, index) => (\n          <option key={category._id} value={category.category}>\n            {category.category}\n          </option>\n        ))}\n      </select>\n        <input\n          type=\"number\"\n          value={newExpense}\n          onChange={(e) => setNewExpense(e.target.value)}\n          placeholder=\"Expense\"\n        />\n        <button onClick={handleAddExpense}>Add Expense</button>\n      </div>\n\n      <h4>Expense List</h4>\n      <ul className=\"expense-list\">\n        {expenseList.map((item) => (\n          <li key={item._id} className=\"expense-item\">\n            <span>\n              {item.category}: ₹{item.expense}\n            </span>\n            <span>Date: {new Date(item.date).toLocaleDateString()}</span>\n            <p>Update Value:</p>\n            <input\n              type=\"number\"\n              value={item.expense}\n              onChange={(e) => handleUpdateExpense(item._id, parseFloat(e.target.value))}\n            />\n            <button onClick={() => handleRemoveExpense(item._id)}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ExpenseManagement;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}